// <auto-generated />
using System;
using ConfigManagerStend.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ConfigManagerStend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250818130850_Stand")]
    partial class Stand
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("ConfigManagerStend.Domain.Entities.BuildDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("NameRepo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("BuildDefinitions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameRepo = "Delo2020",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 2,
                            NameRepo = "Delo2020-CB",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 3,
                            NameRepo = "Delo2020-EEK",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 4,
                            NameRepo = "Delo2020-GD",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 5,
                            NameRepo = "Delo2020-Kaliningrad",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 6,
                            NameRepo = "Delo2020-MinKult",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 7,
                            NameRepo = "Delo2020-MinTrud",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 8,
                            NameRepo = "TITUL",
                            ProjectId = 2
                        },
                        new
                        {
                            Id = 9,
                            NameRepo = "Nadzor2025",
                            ProjectId = 3
                        });
                });

            modelBuilder.Entity("ConfigManagerStend.Domain.Entities.Config", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateFileReplacement")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateFileVerifiedToExist")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullPathFile")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NameFile")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NameStand")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StatusId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Configs");
                });

            modelBuilder.Entity("ConfigManagerStend.Domain.Entities.ConfigStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("NameStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ConfigStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameStatus = "Подключен"
                        },
                        new
                        {
                            Id = 2,
                            NameStatus = "Отключен"
                        });
                });

            modelBuilder.Entity("ConfigManagerStend.Domain.Entities.ConfigStend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Appn")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BoxSettingDir")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DbOwner")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NameConfig")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PathStend")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PlatformHostDir")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PortA")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RepoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SettingDb")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RepoId");

                    b.ToTable("ConfigStends");
                });

            modelBuilder.Entity("ConfigManagerStend.Domain.Entities.TeamProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("NameProject")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TeamProjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameProject = "Delo2020"
                        },
                        new
                        {
                            Id = 2,
                            NameProject = "TITUL"
                        },
                        new
                        {
                            Id = 3,
                            NameProject = "Nadzor2025"
                        });
                });

            modelBuilder.Entity("ConfigManagerStend.Domain.Entities.BuildDefinition", b =>
                {
                    b.HasOne("ConfigManagerStend.Domain.Entities.TeamProject", "TeamProject")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeamProject");
                });

            modelBuilder.Entity("ConfigManagerStend.Domain.Entities.Config", b =>
                {
                    b.HasOne("ConfigManagerStend.Domain.Entities.ConfigStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("ConfigManagerStend.Domain.Entities.ConfigStend", b =>
                {
                    b.HasOne("ConfigManagerStend.Domain.Entities.BuildDefinition", "BuildDefinition")
                        .WithMany()
                        .HasForeignKey("RepoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BuildDefinition");
                });
#pragma warning restore 612, 618
        }
    }
}
